// source: types.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global =
    (typeof globalThis !== 'undefined' && globalThis) ||
    (typeof window !== 'undefined' && window) ||
    (typeof global !== 'undefined' && global) ||
    (typeof self !== 'undefined' && self) ||
    (function () { return this; }).call(null) ||
    Function('return this')();

goog.exportSymbol('proto.AffinePoint', null, global);
goog.exportSymbol('proto.AnyType', null, global);
goog.exportSymbol('proto.AnyType.DataCase', null, global);
goog.exportSymbol('proto.Exponent', null, global);
goog.exportSymbol('proto.KeygenBroadcastForRound2', null, global);
goog.exportSymbol('proto.KeygenBroadcastForRound3', null, global);
goog.exportSymbol('proto.KeygenBroadcastForRound4', null, global);
goog.exportSymbol('proto.KeygenBroadcastForRound5', null, global);
goog.exportSymbol('proto.PedersenParameters', null, global);
goog.exportSymbol('proto.ResponsesEntry', null, global);
goog.exportSymbol('proto.ZkFacCommitment', null, global);
goog.exportSymbol('proto.ZkFacPrivate', null, global);
goog.exportSymbol('proto.ZkFacProof', null, global);
goog.exportSymbol('proto.ZkFacProof.ZkFacProofInner', null, global);
goog.exportSymbol('proto.ZkFacPublic', null, global);
goog.exportSymbol('proto.ZkModProof', null, global);
goog.exportSymbol('proto.ZkModResponse', null, global);
goog.exportSymbol('proto.ZkPrmPrivate', null, global);
goog.exportSymbol('proto.ZkPrmProof', null, global);
goog.exportSymbol('proto.ZkSchCommitment', null, global);
goog.exportSymbol('proto.ZkSchResponse', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.AffinePoint = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.AffinePoint, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.AffinePoint.displayName = 'proto.AffinePoint';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Exponent = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.Exponent.repeatedFields_, null);
};
goog.inherits(proto.Exponent, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Exponent.displayName = 'proto.Exponent';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.PedersenParameters = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.PedersenParameters, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.PedersenParameters.displayName = 'proto.PedersenParameters';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ZkSchCommitment = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ZkSchCommitment, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ZkSchCommitment.displayName = 'proto.ZkSchCommitment';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.KeygenBroadcastForRound3 = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.KeygenBroadcastForRound3, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.KeygenBroadcastForRound3.displayName = 'proto.KeygenBroadcastForRound3';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ZkModResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ZkModResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ZkModResponse.displayName = 'proto.ZkModResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ResponsesEntry = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.ResponsesEntry.repeatedFields_, null);
};
goog.inherits(proto.ResponsesEntry, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ResponsesEntry.displayName = 'proto.ResponsesEntry';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ZkModProof = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.ZkModProof.repeatedFields_, null);
};
goog.inherits(proto.ZkModProof, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ZkModProof.displayName = 'proto.ZkModProof';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.KeygenBroadcastForRound4 = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.KeygenBroadcastForRound4, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.KeygenBroadcastForRound4.displayName = 'proto.KeygenBroadcastForRound4';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ZkPrmPrivate = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ZkPrmPrivate, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ZkPrmPrivate.displayName = 'proto.ZkPrmPrivate';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ZkPrmProof = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.ZkPrmProof.repeatedFields_, null);
};
goog.inherits(proto.ZkPrmProof, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ZkPrmProof.displayName = 'proto.ZkPrmProof';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ZkSchResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ZkSchResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ZkSchResponse.displayName = 'proto.ZkSchResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.KeygenBroadcastForRound5 = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.KeygenBroadcastForRound5, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.KeygenBroadcastForRound5.displayName = 'proto.KeygenBroadcastForRound5';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ZkFacPublic = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ZkFacPublic, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ZkFacPublic.displayName = 'proto.ZkFacPublic';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ZkFacPrivate = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ZkFacPrivate, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ZkFacPrivate.displayName = 'proto.ZkFacPrivate';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ZkFacCommitment = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ZkFacCommitment, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ZkFacCommitment.displayName = 'proto.ZkFacCommitment';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ZkFacProof = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ZkFacProof, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ZkFacProof.displayName = 'proto.ZkFacProof';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ZkFacProof.ZkFacProofInner = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ZkFacProof.ZkFacProofInner, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ZkFacProof.ZkFacProofInner.displayName = 'proto.ZkFacProof.ZkFacProofInner';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.KeygenBroadcastForRound2 = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.KeygenBroadcastForRound2, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.KeygenBroadcastForRound2.displayName = 'proto.KeygenBroadcastForRound2';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.AnyType = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.AnyType.oneofGroups_);
};
goog.inherits(proto.AnyType, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.AnyType.displayName = 'proto.AnyType';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.AffinePoint.prototype.toObject = function(opt_includeInstance) {
  return proto.AffinePoint.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.AffinePoint} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.AffinePoint.toObject = function(includeInstance, msg) {
  var f, obj = {
    xhex: jspb.Message.getFieldWithDefault(msg, 1, ""),
    yhex: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.AffinePoint}
 */
proto.AffinePoint.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.AffinePoint;
  return proto.AffinePoint.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.AffinePoint} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.AffinePoint}
 */
proto.AffinePoint.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setXhex(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setYhex(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.AffinePoint.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.AffinePoint.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.AffinePoint} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.AffinePoint.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getXhex();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getYhex();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string xHex = 1;
 * @return {string}
 */
proto.AffinePoint.prototype.getXhex = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.AffinePoint} returns this
 */
proto.AffinePoint.prototype.setXhex = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string yHex = 2;
 * @return {string}
 */
proto.AffinePoint.prototype.getYhex = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.AffinePoint} returns this
 */
proto.AffinePoint.prototype.setYhex = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.Exponent.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Exponent.prototype.toObject = function(opt_includeInstance) {
  return proto.Exponent.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Exponent} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Exponent.toObject = function(includeInstance, msg) {
  var f, obj = {
    isconstant: jspb.Message.getBooleanFieldWithDefault(msg, 1, false),
    coefficientsList: jspb.Message.toObjectList(msg.getCoefficientsList(),
    proto.AffinePoint.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Exponent}
 */
proto.Exponent.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Exponent;
  return proto.Exponent.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Exponent} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Exponent}
 */
proto.Exponent.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsconstant(value);
      break;
    case 2:
      var value = new proto.AffinePoint;
      reader.readMessage(value,proto.AffinePoint.deserializeBinaryFromReader);
      msg.addCoefficients(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Exponent.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Exponent.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Exponent} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Exponent.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getIsconstant();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
  f = message.getCoefficientsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.AffinePoint.serializeBinaryToWriter
    );
  }
};


/**
 * optional bool isConstant = 1;
 * @return {boolean}
 */
proto.Exponent.prototype.getIsconstant = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));
};


/**
 * @param {boolean} value
 * @return {!proto.Exponent} returns this
 */
proto.Exponent.prototype.setIsconstant = function(value) {
  return jspb.Message.setProto3BooleanField(this, 1, value);
};


/**
 * repeated AffinePoint coefficients = 2;
 * @return {!Array<!proto.AffinePoint>}
 */
proto.Exponent.prototype.getCoefficientsList = function() {
  return /** @type{!Array<!proto.AffinePoint>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.AffinePoint, 2));
};


/**
 * @param {!Array<!proto.AffinePoint>} value
 * @return {!proto.Exponent} returns this
*/
proto.Exponent.prototype.setCoefficientsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.AffinePoint=} opt_value
 * @param {number=} opt_index
 * @return {!proto.AffinePoint}
 */
proto.Exponent.prototype.addCoefficients = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.AffinePoint, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.Exponent} returns this
 */
proto.Exponent.prototype.clearCoefficientsList = function() {
  return this.setCoefficientsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.PedersenParameters.prototype.toObject = function(opt_includeInstance) {
  return proto.PedersenParameters.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.PedersenParameters} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PedersenParameters.toObject = function(includeInstance, msg) {
  var f, obj = {
    nhex: jspb.Message.getFieldWithDefault(msg, 1, ""),
    shex: jspb.Message.getFieldWithDefault(msg, 2, ""),
    thex: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.PedersenParameters}
 */
proto.PedersenParameters.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.PedersenParameters;
  return proto.PedersenParameters.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.PedersenParameters} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.PedersenParameters}
 */
proto.PedersenParameters.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setNhex(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setShex(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setThex(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.PedersenParameters.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.PedersenParameters.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.PedersenParameters} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PedersenParameters.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getNhex();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getShex();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getThex();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional string nHex = 1;
 * @return {string}
 */
proto.PedersenParameters.prototype.getNhex = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.PedersenParameters} returns this
 */
proto.PedersenParameters.prototype.setNhex = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string sHex = 2;
 * @return {string}
 */
proto.PedersenParameters.prototype.getShex = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.PedersenParameters} returns this
 */
proto.PedersenParameters.prototype.setShex = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string tHex = 3;
 * @return {string}
 */
proto.PedersenParameters.prototype.getThex = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.PedersenParameters} returns this
 */
proto.PedersenParameters.prototype.setThex = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ZkSchCommitment.prototype.toObject = function(opt_includeInstance) {
  return proto.ZkSchCommitment.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ZkSchCommitment} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ZkSchCommitment.toObject = function(includeInstance, msg) {
  var f, obj = {
    c: (f = msg.getC()) && proto.AffinePoint.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ZkSchCommitment}
 */
proto.ZkSchCommitment.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ZkSchCommitment;
  return proto.ZkSchCommitment.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ZkSchCommitment} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ZkSchCommitment}
 */
proto.ZkSchCommitment.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.AffinePoint;
      reader.readMessage(value,proto.AffinePoint.deserializeBinaryFromReader);
      msg.setC(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ZkSchCommitment.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ZkSchCommitment.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ZkSchCommitment} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ZkSchCommitment.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getC();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.AffinePoint.serializeBinaryToWriter
    );
  }
};


/**
 * optional AffinePoint C = 1;
 * @return {?proto.AffinePoint}
 */
proto.ZkSchCommitment.prototype.getC = function() {
  return /** @type{?proto.AffinePoint} */ (
    jspb.Message.getWrapperField(this, proto.AffinePoint, 1));
};


/**
 * @param {?proto.AffinePoint|undefined} value
 * @return {!proto.ZkSchCommitment} returns this
*/
proto.ZkSchCommitment.prototype.setC = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ZkSchCommitment} returns this
 */
proto.ZkSchCommitment.prototype.clearC = function() {
  return this.setC(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ZkSchCommitment.prototype.hasC = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.KeygenBroadcastForRound3.prototype.toObject = function(opt_includeInstance) {
  return proto.KeygenBroadcastForRound3.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.KeygenBroadcastForRound3} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.KeygenBroadcastForRound3.toObject = function(includeInstance, msg) {
  var f, obj = {
    from: jspb.Message.getFieldWithDefault(msg, 1, ""),
    ridhex: jspb.Message.getFieldWithDefault(msg, 2, ""),
    chex: jspb.Message.getFieldWithDefault(msg, 3, ""),
    vsspolynomial: (f = msg.getVsspolynomial()) && proto.Exponent.toObject(includeInstance, f),
    schnorrcommitment: (f = msg.getSchnorrcommitment()) && proto.ZkSchCommitment.toObject(includeInstance, f),
    elgamalpublic: (f = msg.getElgamalpublic()) && proto.AffinePoint.toObject(includeInstance, f),
    pedersenpublic: (f = msg.getPedersenpublic()) && proto.PedersenParameters.toObject(includeInstance, f),
    decommitmenthex: jspb.Message.getFieldWithDefault(msg, 8, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.KeygenBroadcastForRound3}
 */
proto.KeygenBroadcastForRound3.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.KeygenBroadcastForRound3;
  return proto.KeygenBroadcastForRound3.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.KeygenBroadcastForRound3} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.KeygenBroadcastForRound3}
 */
proto.KeygenBroadcastForRound3.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setFrom(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setRidhex(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setChex(value);
      break;
    case 4:
      var value = new proto.Exponent;
      reader.readMessage(value,proto.Exponent.deserializeBinaryFromReader);
      msg.setVsspolynomial(value);
      break;
    case 5:
      var value = new proto.ZkSchCommitment;
      reader.readMessage(value,proto.ZkSchCommitment.deserializeBinaryFromReader);
      msg.setSchnorrcommitment(value);
      break;
    case 6:
      var value = new proto.AffinePoint;
      reader.readMessage(value,proto.AffinePoint.deserializeBinaryFromReader);
      msg.setElgamalpublic(value);
      break;
    case 7:
      var value = new proto.PedersenParameters;
      reader.readMessage(value,proto.PedersenParameters.deserializeBinaryFromReader);
      msg.setPedersenpublic(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setDecommitmenthex(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.KeygenBroadcastForRound3.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.KeygenBroadcastForRound3.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.KeygenBroadcastForRound3} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.KeygenBroadcastForRound3.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFrom();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getRidhex();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getChex();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getVsspolynomial();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.Exponent.serializeBinaryToWriter
    );
  }
  f = message.getSchnorrcommitment();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.ZkSchCommitment.serializeBinaryToWriter
    );
  }
  f = message.getElgamalpublic();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.AffinePoint.serializeBinaryToWriter
    );
  }
  f = message.getPedersenpublic();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      proto.PedersenParameters.serializeBinaryToWriter
    );
  }
  f = message.getDecommitmenthex();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
};


/**
 * optional string from = 1;
 * @return {string}
 */
proto.KeygenBroadcastForRound3.prototype.getFrom = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.KeygenBroadcastForRound3} returns this
 */
proto.KeygenBroadcastForRound3.prototype.setFrom = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string RIDhex = 2;
 * @return {string}
 */
proto.KeygenBroadcastForRound3.prototype.getRidhex = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.KeygenBroadcastForRound3} returns this
 */
proto.KeygenBroadcastForRound3.prototype.setRidhex = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string Chex = 3;
 * @return {string}
 */
proto.KeygenBroadcastForRound3.prototype.getChex = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.KeygenBroadcastForRound3} returns this
 */
proto.KeygenBroadcastForRound3.prototype.setChex = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional Exponent vssPolynomial = 4;
 * @return {?proto.Exponent}
 */
proto.KeygenBroadcastForRound3.prototype.getVsspolynomial = function() {
  return /** @type{?proto.Exponent} */ (
    jspb.Message.getWrapperField(this, proto.Exponent, 4));
};


/**
 * @param {?proto.Exponent|undefined} value
 * @return {!proto.KeygenBroadcastForRound3} returns this
*/
proto.KeygenBroadcastForRound3.prototype.setVsspolynomial = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.KeygenBroadcastForRound3} returns this
 */
proto.KeygenBroadcastForRound3.prototype.clearVsspolynomial = function() {
  return this.setVsspolynomial(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.KeygenBroadcastForRound3.prototype.hasVsspolynomial = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional ZkSchCommitment schnorrCommitment = 5;
 * @return {?proto.ZkSchCommitment}
 */
proto.KeygenBroadcastForRound3.prototype.getSchnorrcommitment = function() {
  return /** @type{?proto.ZkSchCommitment} */ (
    jspb.Message.getWrapperField(this, proto.ZkSchCommitment, 5));
};


/**
 * @param {?proto.ZkSchCommitment|undefined} value
 * @return {!proto.KeygenBroadcastForRound3} returns this
*/
proto.KeygenBroadcastForRound3.prototype.setSchnorrcommitment = function(value) {
  return jspb.Message.setWrapperField(this, 5, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.KeygenBroadcastForRound3} returns this
 */
proto.KeygenBroadcastForRound3.prototype.clearSchnorrcommitment = function() {
  return this.setSchnorrcommitment(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.KeygenBroadcastForRound3.prototype.hasSchnorrcommitment = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional AffinePoint elGamalPublic = 6;
 * @return {?proto.AffinePoint}
 */
proto.KeygenBroadcastForRound3.prototype.getElgamalpublic = function() {
  return /** @type{?proto.AffinePoint} */ (
    jspb.Message.getWrapperField(this, proto.AffinePoint, 6));
};


/**
 * @param {?proto.AffinePoint|undefined} value
 * @return {!proto.KeygenBroadcastForRound3} returns this
*/
proto.KeygenBroadcastForRound3.prototype.setElgamalpublic = function(value) {
  return jspb.Message.setWrapperField(this, 6, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.KeygenBroadcastForRound3} returns this
 */
proto.KeygenBroadcastForRound3.prototype.clearElgamalpublic = function() {
  return this.setElgamalpublic(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.KeygenBroadcastForRound3.prototype.hasElgamalpublic = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional PedersenParameters pedersenPublic = 7;
 * @return {?proto.PedersenParameters}
 */
proto.KeygenBroadcastForRound3.prototype.getPedersenpublic = function() {
  return /** @type{?proto.PedersenParameters} */ (
    jspb.Message.getWrapperField(this, proto.PedersenParameters, 7));
};


/**
 * @param {?proto.PedersenParameters|undefined} value
 * @return {!proto.KeygenBroadcastForRound3} returns this
*/
proto.KeygenBroadcastForRound3.prototype.setPedersenpublic = function(value) {
  return jspb.Message.setWrapperField(this, 7, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.KeygenBroadcastForRound3} returns this
 */
proto.KeygenBroadcastForRound3.prototype.clearPedersenpublic = function() {
  return this.setPedersenpublic(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.KeygenBroadcastForRound3.prototype.hasPedersenpublic = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional string decommitmentHex = 8;
 * @return {string}
 */
proto.KeygenBroadcastForRound3.prototype.getDecommitmenthex = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/**
 * @param {string} value
 * @return {!proto.KeygenBroadcastForRound3} returns this
 */
proto.KeygenBroadcastForRound3.prototype.setDecommitmenthex = function(value) {
  return jspb.Message.setProto3StringField(this, 8, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ZkModResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.ZkModResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ZkModResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ZkModResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    a: jspb.Message.getBooleanFieldWithDefault(msg, 1, false),
    b: jspb.Message.getBooleanFieldWithDefault(msg, 2, false),
    x: jspb.Message.getFieldWithDefault(msg, 3, 0),
    z: jspb.Message.getFieldWithDefault(msg, 4, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ZkModResponse}
 */
proto.ZkModResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ZkModResponse;
  return proto.ZkModResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ZkModResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ZkModResponse}
 */
proto.ZkModResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setA(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setB(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setX(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setZ(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ZkModResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ZkModResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ZkModResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ZkModResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getA();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
  f = message.getB();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
  f = message.getX();
  if (f !== 0) {
    writer.writeInt64(
      3,
      f
    );
  }
  f = message.getZ();
  if (f !== 0) {
    writer.writeInt64(
      4,
      f
    );
  }
};


/**
 * optional bool A = 1;
 * @return {boolean}
 */
proto.ZkModResponse.prototype.getA = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));
};


/**
 * @param {boolean} value
 * @return {!proto.ZkModResponse} returns this
 */
proto.ZkModResponse.prototype.setA = function(value) {
  return jspb.Message.setProto3BooleanField(this, 1, value);
};


/**
 * optional bool B = 2;
 * @return {boolean}
 */
proto.ZkModResponse.prototype.getB = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 2, false));
};


/**
 * @param {boolean} value
 * @return {!proto.ZkModResponse} returns this
 */
proto.ZkModResponse.prototype.setB = function(value) {
  return jspb.Message.setProto3BooleanField(this, 2, value);
};


/**
 * optional int64 X = 3;
 * @return {number}
 */
proto.ZkModResponse.prototype.getX = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.ZkModResponse} returns this
 */
proto.ZkModResponse.prototype.setX = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional int64 Z = 4;
 * @return {number}
 */
proto.ZkModResponse.prototype.getZ = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.ZkModResponse} returns this
 */
proto.ZkModResponse.prototype.setZ = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.ResponsesEntry.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ResponsesEntry.prototype.toObject = function(opt_includeInstance) {
  return proto.ResponsesEntry.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ResponsesEntry} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ResponsesEntry.toObject = function(includeInstance, msg) {
  var f, obj = {
    entryList: jspb.Message.toObjectList(msg.getEntryList(),
    proto.ZkModResponse.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ResponsesEntry}
 */
proto.ResponsesEntry.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ResponsesEntry;
  return proto.ResponsesEntry.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ResponsesEntry} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ResponsesEntry}
 */
proto.ResponsesEntry.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.ZkModResponse;
      reader.readMessage(value,proto.ZkModResponse.deserializeBinaryFromReader);
      msg.addEntry(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ResponsesEntry.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ResponsesEntry.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ResponsesEntry} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ResponsesEntry.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getEntryList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.ZkModResponse.serializeBinaryToWriter
    );
  }
};


/**
 * repeated ZkModResponse entry = 1;
 * @return {!Array<!proto.ZkModResponse>}
 */
proto.ResponsesEntry.prototype.getEntryList = function() {
  return /** @type{!Array<!proto.ZkModResponse>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.ZkModResponse, 1));
};


/**
 * @param {!Array<!proto.ZkModResponse>} value
 * @return {!proto.ResponsesEntry} returns this
*/
proto.ResponsesEntry.prototype.setEntryList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.ZkModResponse=} opt_value
 * @param {number=} opt_index
 * @return {!proto.ZkModResponse}
 */
proto.ResponsesEntry.prototype.addEntry = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.ZkModResponse, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.ResponsesEntry} returns this
 */
proto.ResponsesEntry.prototype.clearEntryList = function() {
  return this.setEntryList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.ZkModProof.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ZkModProof.prototype.toObject = function(opt_includeInstance) {
  return proto.ZkModProof.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ZkModProof} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ZkModProof.toObject = function(includeInstance, msg) {
  var f, obj = {
    whex: jspb.Message.getFieldWithDefault(msg, 1, ""),
    responsesList: jspb.Message.toObjectList(msg.getResponsesList(),
    proto.ZkModResponse.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ZkModProof}
 */
proto.ZkModProof.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ZkModProof;
  return proto.ZkModProof.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ZkModProof} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ZkModProof}
 */
proto.ZkModProof.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setWhex(value);
      break;
    case 2:
      var value = new proto.ZkModResponse;
      reader.readMessage(value,proto.ZkModResponse.deserializeBinaryFromReader);
      msg.addResponses(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ZkModProof.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ZkModProof.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ZkModProof} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ZkModProof.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getWhex();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getResponsesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.ZkModResponse.serializeBinaryToWriter
    );
  }
};


/**
 * optional string Whex = 1;
 * @return {string}
 */
proto.ZkModProof.prototype.getWhex = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.ZkModProof} returns this
 */
proto.ZkModProof.prototype.setWhex = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * repeated ZkModResponse Responses = 2;
 * @return {!Array<!proto.ZkModResponse>}
 */
proto.ZkModProof.prototype.getResponsesList = function() {
  return /** @type{!Array<!proto.ZkModResponse>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.ZkModResponse, 2));
};


/**
 * @param {!Array<!proto.ZkModResponse>} value
 * @return {!proto.ZkModProof} returns this
*/
proto.ZkModProof.prototype.setResponsesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.ZkModResponse=} opt_value
 * @param {number=} opt_index
 * @return {!proto.ZkModResponse}
 */
proto.ZkModProof.prototype.addResponses = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.ZkModResponse, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.ZkModProof} returns this
 */
proto.ZkModProof.prototype.clearResponsesList = function() {
  return this.setResponsesList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.KeygenBroadcastForRound4.prototype.toObject = function(opt_includeInstance) {
  return proto.KeygenBroadcastForRound4.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.KeygenBroadcastForRound4} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.KeygenBroadcastForRound4.toObject = function(includeInstance, msg) {
  var f, obj = {
    from: jspb.Message.getFieldWithDefault(msg, 1, ""),
    modproof: (f = msg.getModproof()) && proto.ZkModProof.toObject(includeInstance, f),
    prmproof: (f = msg.getPrmproof()) && proto.ZkPrmProof.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.KeygenBroadcastForRound4}
 */
proto.KeygenBroadcastForRound4.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.KeygenBroadcastForRound4;
  return proto.KeygenBroadcastForRound4.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.KeygenBroadcastForRound4} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.KeygenBroadcastForRound4}
 */
proto.KeygenBroadcastForRound4.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setFrom(value);
      break;
    case 2:
      var value = new proto.ZkModProof;
      reader.readMessage(value,proto.ZkModProof.deserializeBinaryFromReader);
      msg.setModproof(value);
      break;
    case 3:
      var value = new proto.ZkPrmProof;
      reader.readMessage(value,proto.ZkPrmProof.deserializeBinaryFromReader);
      msg.setPrmproof(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.KeygenBroadcastForRound4.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.KeygenBroadcastForRound4.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.KeygenBroadcastForRound4} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.KeygenBroadcastForRound4.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFrom();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getModproof();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.ZkModProof.serializeBinaryToWriter
    );
  }
  f = message.getPrmproof();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.ZkPrmProof.serializeBinaryToWriter
    );
  }
};


/**
 * optional string from = 1;
 * @return {string}
 */
proto.KeygenBroadcastForRound4.prototype.getFrom = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.KeygenBroadcastForRound4} returns this
 */
proto.KeygenBroadcastForRound4.prototype.setFrom = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional ZkModProof modProof = 2;
 * @return {?proto.ZkModProof}
 */
proto.KeygenBroadcastForRound4.prototype.getModproof = function() {
  return /** @type{?proto.ZkModProof} */ (
    jspb.Message.getWrapperField(this, proto.ZkModProof, 2));
};


/**
 * @param {?proto.ZkModProof|undefined} value
 * @return {!proto.KeygenBroadcastForRound4} returns this
*/
proto.KeygenBroadcastForRound4.prototype.setModproof = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.KeygenBroadcastForRound4} returns this
 */
proto.KeygenBroadcastForRound4.prototype.clearModproof = function() {
  return this.setModproof(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.KeygenBroadcastForRound4.prototype.hasModproof = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional ZkPrmProof prmProof = 3;
 * @return {?proto.ZkPrmProof}
 */
proto.KeygenBroadcastForRound4.prototype.getPrmproof = function() {
  return /** @type{?proto.ZkPrmProof} */ (
    jspb.Message.getWrapperField(this, proto.ZkPrmProof, 3));
};


/**
 * @param {?proto.ZkPrmProof|undefined} value
 * @return {!proto.KeygenBroadcastForRound4} returns this
*/
proto.KeygenBroadcastForRound4.prototype.setPrmproof = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.KeygenBroadcastForRound4} returns this
 */
proto.KeygenBroadcastForRound4.prototype.clearPrmproof = function() {
  return this.setPrmproof(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.KeygenBroadcastForRound4.prototype.hasPrmproof = function() {
  return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ZkPrmPrivate.prototype.toObject = function(opt_includeInstance) {
  return proto.ZkPrmPrivate.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ZkPrmPrivate} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ZkPrmPrivate.toObject = function(includeInstance, msg) {
  var f, obj = {
    lambda: jspb.Message.getFieldWithDefault(msg, 1, 0),
    phi: jspb.Message.getFieldWithDefault(msg, 2, 0),
    p: jspb.Message.getFieldWithDefault(msg, 3, 0),
    q: jspb.Message.getFieldWithDefault(msg, 4, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ZkPrmPrivate}
 */
proto.ZkPrmPrivate.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ZkPrmPrivate;
  return proto.ZkPrmPrivate.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ZkPrmPrivate} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ZkPrmPrivate}
 */
proto.ZkPrmPrivate.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setLambda(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setPhi(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setP(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setQ(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ZkPrmPrivate.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ZkPrmPrivate.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ZkPrmPrivate} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ZkPrmPrivate.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getLambda();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getPhi();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
  f = message.getP();
  if (f !== 0) {
    writer.writeInt64(
      3,
      f
    );
  }
  f = message.getQ();
  if (f !== 0) {
    writer.writeInt64(
      4,
      f
    );
  }
};


/**
 * optional int64 Lambda = 1;
 * @return {number}
 */
proto.ZkPrmPrivate.prototype.getLambda = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.ZkPrmPrivate} returns this
 */
proto.ZkPrmPrivate.prototype.setLambda = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int64 Phi = 2;
 * @return {number}
 */
proto.ZkPrmPrivate.prototype.getPhi = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.ZkPrmPrivate} returns this
 */
proto.ZkPrmPrivate.prototype.setPhi = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional int64 P = 3;
 * @return {number}
 */
proto.ZkPrmPrivate.prototype.getP = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.ZkPrmPrivate} returns this
 */
proto.ZkPrmPrivate.prototype.setP = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional int64 Q = 4;
 * @return {number}
 */
proto.ZkPrmPrivate.prototype.getQ = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.ZkPrmPrivate} returns this
 */
proto.ZkPrmPrivate.prototype.setQ = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.ZkPrmProof.repeatedFields_ = [1,2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ZkPrmProof.prototype.toObject = function(opt_includeInstance) {
  return proto.ZkPrmProof.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ZkPrmProof} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ZkPrmProof.toObject = function(includeInstance, msg) {
  var f, obj = {
    ashexList: (f = jspb.Message.getRepeatedField(msg, 1)) == null ? undefined : f,
    zshexList: (f = jspb.Message.getRepeatedField(msg, 2)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ZkPrmProof}
 */
proto.ZkPrmProof.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ZkPrmProof;
  return proto.ZkPrmProof.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ZkPrmProof} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ZkPrmProof}
 */
proto.ZkPrmProof.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.addAshex(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.addZshex(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ZkPrmProof.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ZkPrmProof.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ZkPrmProof} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ZkPrmProof.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAshexList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      1,
      f
    );
  }
  f = message.getZshexList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      2,
      f
    );
  }
};


/**
 * repeated string AsHex = 1;
 * @return {!Array<string>}
 */
proto.ZkPrmProof.prototype.getAshexList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 1));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.ZkPrmProof} returns this
 */
proto.ZkPrmProof.prototype.setAshexList = function(value) {
  return jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.ZkPrmProof} returns this
 */
proto.ZkPrmProof.prototype.addAshex = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.ZkPrmProof} returns this
 */
proto.ZkPrmProof.prototype.clearAshexList = function() {
  return this.setAshexList([]);
};


/**
 * repeated string ZsHex = 2;
 * @return {!Array<string>}
 */
proto.ZkPrmProof.prototype.getZshexList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 2));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.ZkPrmProof} returns this
 */
proto.ZkPrmProof.prototype.setZshexList = function(value) {
  return jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.ZkPrmProof} returns this
 */
proto.ZkPrmProof.prototype.addZshex = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.ZkPrmProof} returns this
 */
proto.ZkPrmProof.prototype.clearZshexList = function() {
  return this.setZshexList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ZkSchResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.ZkSchResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ZkSchResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ZkSchResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    zhex: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ZkSchResponse}
 */
proto.ZkSchResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ZkSchResponse;
  return proto.ZkSchResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ZkSchResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ZkSchResponse}
 */
proto.ZkSchResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setZhex(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ZkSchResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ZkSchResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ZkSchResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ZkSchResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getZhex();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string Zhex = 1;
 * @return {string}
 */
proto.ZkSchResponse.prototype.getZhex = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.ZkSchResponse} returns this
 */
proto.ZkSchResponse.prototype.setZhex = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.KeygenBroadcastForRound5.prototype.toObject = function(opt_includeInstance) {
  return proto.KeygenBroadcastForRound5.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.KeygenBroadcastForRound5} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.KeygenBroadcastForRound5.toObject = function(includeInstance, msg) {
  var f, obj = {
    from: jspb.Message.getFieldWithDefault(msg, 1, ""),
    schnorrresponse: (f = msg.getSchnorrresponse()) && proto.ZkSchResponse.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.KeygenBroadcastForRound5}
 */
proto.KeygenBroadcastForRound5.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.KeygenBroadcastForRound5;
  return proto.KeygenBroadcastForRound5.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.KeygenBroadcastForRound5} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.KeygenBroadcastForRound5}
 */
proto.KeygenBroadcastForRound5.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setFrom(value);
      break;
    case 2:
      var value = new proto.ZkSchResponse;
      reader.readMessage(value,proto.ZkSchResponse.deserializeBinaryFromReader);
      msg.setSchnorrresponse(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.KeygenBroadcastForRound5.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.KeygenBroadcastForRound5.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.KeygenBroadcastForRound5} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.KeygenBroadcastForRound5.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFrom();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getSchnorrresponse();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.ZkSchResponse.serializeBinaryToWriter
    );
  }
};


/**
 * optional string from = 1;
 * @return {string}
 */
proto.KeygenBroadcastForRound5.prototype.getFrom = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.KeygenBroadcastForRound5} returns this
 */
proto.KeygenBroadcastForRound5.prototype.setFrom = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional ZkSchResponse SchnorrResponse = 2;
 * @return {?proto.ZkSchResponse}
 */
proto.KeygenBroadcastForRound5.prototype.getSchnorrresponse = function() {
  return /** @type{?proto.ZkSchResponse} */ (
    jspb.Message.getWrapperField(this, proto.ZkSchResponse, 2));
};


/**
 * @param {?proto.ZkSchResponse|undefined} value
 * @return {!proto.KeygenBroadcastForRound5} returns this
*/
proto.KeygenBroadcastForRound5.prototype.setSchnorrresponse = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.KeygenBroadcastForRound5} returns this
 */
proto.KeygenBroadcastForRound5.prototype.clearSchnorrresponse = function() {
  return this.setSchnorrresponse(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.KeygenBroadcastForRound5.prototype.hasSchnorrresponse = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ZkFacPublic.prototype.toObject = function(opt_includeInstance) {
  return proto.ZkFacPublic.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ZkFacPublic} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ZkFacPublic.toObject = function(includeInstance, msg) {
  var f, obj = {
    n: jspb.Message.getFieldWithDefault(msg, 1, 0),
    aux: (f = msg.getAux()) && proto.PedersenParameters.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ZkFacPublic}
 */
proto.ZkFacPublic.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ZkFacPublic;
  return proto.ZkFacPublic.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ZkFacPublic} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ZkFacPublic}
 */
proto.ZkFacPublic.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setN(value);
      break;
    case 2:
      var value = new proto.PedersenParameters;
      reader.readMessage(value,proto.PedersenParameters.deserializeBinaryFromReader);
      msg.setAux(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ZkFacPublic.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ZkFacPublic.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ZkFacPublic} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ZkFacPublic.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getN();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getAux();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.PedersenParameters.serializeBinaryToWriter
    );
  }
};


/**
 * optional int64 N = 1;
 * @return {number}
 */
proto.ZkFacPublic.prototype.getN = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.ZkFacPublic} returns this
 */
proto.ZkFacPublic.prototype.setN = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional PedersenParameters Aux = 2;
 * @return {?proto.PedersenParameters}
 */
proto.ZkFacPublic.prototype.getAux = function() {
  return /** @type{?proto.PedersenParameters} */ (
    jspb.Message.getWrapperField(this, proto.PedersenParameters, 2));
};


/**
 * @param {?proto.PedersenParameters|undefined} value
 * @return {!proto.ZkFacPublic} returns this
*/
proto.ZkFacPublic.prototype.setAux = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ZkFacPublic} returns this
 */
proto.ZkFacPublic.prototype.clearAux = function() {
  return this.setAux(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ZkFacPublic.prototype.hasAux = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ZkFacPrivate.prototype.toObject = function(opt_includeInstance) {
  return proto.ZkFacPrivate.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ZkFacPrivate} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ZkFacPrivate.toObject = function(includeInstance, msg) {
  var f, obj = {
    p: jspb.Message.getFieldWithDefault(msg, 1, 0),
    q: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ZkFacPrivate}
 */
proto.ZkFacPrivate.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ZkFacPrivate;
  return proto.ZkFacPrivate.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ZkFacPrivate} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ZkFacPrivate}
 */
proto.ZkFacPrivate.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setP(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setQ(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ZkFacPrivate.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ZkFacPrivate.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ZkFacPrivate} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ZkFacPrivate.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getP();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getQ();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
};


/**
 * optional int64 P = 1;
 * @return {number}
 */
proto.ZkFacPrivate.prototype.getP = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.ZkFacPrivate} returns this
 */
proto.ZkFacPrivate.prototype.setP = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int64 Q = 2;
 * @return {number}
 */
proto.ZkFacPrivate.prototype.getQ = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.ZkFacPrivate} returns this
 */
proto.ZkFacPrivate.prototype.setQ = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ZkFacCommitment.prototype.toObject = function(opt_includeInstance) {
  return proto.ZkFacCommitment.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ZkFacCommitment} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ZkFacCommitment.toObject = function(includeInstance, msg) {
  var f, obj = {
    p: jspb.Message.getFieldWithDefault(msg, 1, 0),
    q: jspb.Message.getFieldWithDefault(msg, 2, 0),
    a: jspb.Message.getFieldWithDefault(msg, 3, 0),
    b: jspb.Message.getFieldWithDefault(msg, 4, 0),
    t: jspb.Message.getFieldWithDefault(msg, 5, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ZkFacCommitment}
 */
proto.ZkFacCommitment.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ZkFacCommitment;
  return proto.ZkFacCommitment.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ZkFacCommitment} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ZkFacCommitment}
 */
proto.ZkFacCommitment.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setP(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setQ(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setA(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setB(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setT(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ZkFacCommitment.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ZkFacCommitment.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ZkFacCommitment} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ZkFacCommitment.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getP();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getQ();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
  f = message.getA();
  if (f !== 0) {
    writer.writeInt64(
      3,
      f
    );
  }
  f = message.getB();
  if (f !== 0) {
    writer.writeInt64(
      4,
      f
    );
  }
  f = message.getT();
  if (f !== 0) {
    writer.writeInt64(
      5,
      f
    );
  }
};


/**
 * optional int64 P = 1;
 * @return {number}
 */
proto.ZkFacCommitment.prototype.getP = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.ZkFacCommitment} returns this
 */
proto.ZkFacCommitment.prototype.setP = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int64 Q = 2;
 * @return {number}
 */
proto.ZkFacCommitment.prototype.getQ = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.ZkFacCommitment} returns this
 */
proto.ZkFacCommitment.prototype.setQ = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional int64 A = 3;
 * @return {number}
 */
proto.ZkFacCommitment.prototype.getA = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.ZkFacCommitment} returns this
 */
proto.ZkFacCommitment.prototype.setA = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional int64 B = 4;
 * @return {number}
 */
proto.ZkFacCommitment.prototype.getB = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.ZkFacCommitment} returns this
 */
proto.ZkFacCommitment.prototype.setB = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional int64 T = 5;
 * @return {number}
 */
proto.ZkFacCommitment.prototype.getT = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.ZkFacCommitment} returns this
 */
proto.ZkFacCommitment.prototype.setT = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ZkFacProof.prototype.toObject = function(opt_includeInstance) {
  return proto.ZkFacProof.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ZkFacProof} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ZkFacProof.toObject = function(includeInstance, msg) {
  var f, obj = {
    comm: (f = msg.getComm()) && proto.ZkFacProof.ZkFacProofInner.toObject(includeInstance, f),
    sigmadec: jspb.Message.getFieldWithDefault(msg, 2, ""),
    z1dec: jspb.Message.getFieldWithDefault(msg, 3, ""),
    z2dec: jspb.Message.getFieldWithDefault(msg, 4, ""),
    w1dec: jspb.Message.getFieldWithDefault(msg, 5, ""),
    w2dec: jspb.Message.getFieldWithDefault(msg, 6, ""),
    vdec: jspb.Message.getFieldWithDefault(msg, 7, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ZkFacProof}
 */
proto.ZkFacProof.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ZkFacProof;
  return proto.ZkFacProof.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ZkFacProof} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ZkFacProof}
 */
proto.ZkFacProof.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.ZkFacProof.ZkFacProofInner;
      reader.readMessage(value,proto.ZkFacProof.ZkFacProofInner.deserializeBinaryFromReader);
      msg.setComm(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setSigmadec(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setZ1dec(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setZ2dec(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setW1dec(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setW2dec(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setVdec(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ZkFacProof.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ZkFacProof.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ZkFacProof} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ZkFacProof.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getComm();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.ZkFacProof.ZkFacProofInner.serializeBinaryToWriter
    );
  }
  f = message.getSigmadec();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getZ1dec();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getZ2dec();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getW1dec();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getW2dec();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getVdec();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ZkFacProof.ZkFacProofInner.prototype.toObject = function(opt_includeInstance) {
  return proto.ZkFacProof.ZkFacProofInner.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ZkFacProof.ZkFacProofInner} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ZkFacProof.ZkFacProofInner.toObject = function(includeInstance, msg) {
  var f, obj = {
    pdec: jspb.Message.getFieldWithDefault(msg, 1, ""),
    qdec: jspb.Message.getFieldWithDefault(msg, 2, ""),
    adec: jspb.Message.getFieldWithDefault(msg, 3, ""),
    bdec: jspb.Message.getFieldWithDefault(msg, 4, ""),
    tdec: jspb.Message.getFieldWithDefault(msg, 5, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ZkFacProof.ZkFacProofInner}
 */
proto.ZkFacProof.ZkFacProofInner.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ZkFacProof.ZkFacProofInner;
  return proto.ZkFacProof.ZkFacProofInner.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ZkFacProof.ZkFacProofInner} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ZkFacProof.ZkFacProofInner}
 */
proto.ZkFacProof.ZkFacProofInner.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setPdec(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setQdec(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setAdec(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setBdec(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setTdec(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ZkFacProof.ZkFacProofInner.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ZkFacProof.ZkFacProofInner.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ZkFacProof.ZkFacProofInner} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ZkFacProof.ZkFacProofInner.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPdec();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getQdec();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getAdec();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getBdec();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getTdec();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
};


/**
 * optional string Pdec = 1;
 * @return {string}
 */
proto.ZkFacProof.ZkFacProofInner.prototype.getPdec = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.ZkFacProof.ZkFacProofInner} returns this
 */
proto.ZkFacProof.ZkFacProofInner.prototype.setPdec = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string Qdec = 2;
 * @return {string}
 */
proto.ZkFacProof.ZkFacProofInner.prototype.getQdec = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.ZkFacProof.ZkFacProofInner} returns this
 */
proto.ZkFacProof.ZkFacProofInner.prototype.setQdec = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string Adec = 3;
 * @return {string}
 */
proto.ZkFacProof.ZkFacProofInner.prototype.getAdec = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.ZkFacProof.ZkFacProofInner} returns this
 */
proto.ZkFacProof.ZkFacProofInner.prototype.setAdec = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string Bdec = 4;
 * @return {string}
 */
proto.ZkFacProof.ZkFacProofInner.prototype.getBdec = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.ZkFacProof.ZkFacProofInner} returns this
 */
proto.ZkFacProof.ZkFacProofInner.prototype.setBdec = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string Tdec = 5;
 * @return {string}
 */
proto.ZkFacProof.ZkFacProofInner.prototype.getTdec = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.ZkFacProof.ZkFacProofInner} returns this
 */
proto.ZkFacProof.ZkFacProofInner.prototype.setTdec = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional ZkFacProofInner comm = 1;
 * @return {?proto.ZkFacProof.ZkFacProofInner}
 */
proto.ZkFacProof.prototype.getComm = function() {
  return /** @type{?proto.ZkFacProof.ZkFacProofInner} */ (
    jspb.Message.getWrapperField(this, proto.ZkFacProof.ZkFacProofInner, 1));
};


/**
 * @param {?proto.ZkFacProof.ZkFacProofInner|undefined} value
 * @return {!proto.ZkFacProof} returns this
*/
proto.ZkFacProof.prototype.setComm = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ZkFacProof} returns this
 */
proto.ZkFacProof.prototype.clearComm = function() {
  return this.setComm(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ZkFacProof.prototype.hasComm = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string sigmaDec = 2;
 * @return {string}
 */
proto.ZkFacProof.prototype.getSigmadec = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.ZkFacProof} returns this
 */
proto.ZkFacProof.prototype.setSigmadec = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string Z1dec = 3;
 * @return {string}
 */
proto.ZkFacProof.prototype.getZ1dec = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.ZkFacProof} returns this
 */
proto.ZkFacProof.prototype.setZ1dec = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string Z2dec = 4;
 * @return {string}
 */
proto.ZkFacProof.prototype.getZ2dec = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.ZkFacProof} returns this
 */
proto.ZkFacProof.prototype.setZ2dec = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string W1dec = 5;
 * @return {string}
 */
proto.ZkFacProof.prototype.getW1dec = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.ZkFacProof} returns this
 */
proto.ZkFacProof.prototype.setW1dec = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional string W2dec = 6;
 * @return {string}
 */
proto.ZkFacProof.prototype.getW2dec = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.ZkFacProof} returns this
 */
proto.ZkFacProof.prototype.setW2dec = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional string Vdec = 7;
 * @return {string}
 */
proto.ZkFacProof.prototype.getVdec = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * @param {string} value
 * @return {!proto.ZkFacProof} returns this
 */
proto.ZkFacProof.prototype.setVdec = function(value) {
  return jspb.Message.setProto3StringField(this, 7, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.KeygenBroadcastForRound2.prototype.toObject = function(opt_includeInstance) {
  return proto.KeygenBroadcastForRound2.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.KeygenBroadcastForRound2} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.KeygenBroadcastForRound2.toObject = function(includeInstance, msg) {
  var f, obj = {
    from: jspb.Message.getFieldWithDefault(msg, 1, ""),
    commitmenthex: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.KeygenBroadcastForRound2}
 */
proto.KeygenBroadcastForRound2.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.KeygenBroadcastForRound2;
  return proto.KeygenBroadcastForRound2.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.KeygenBroadcastForRound2} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.KeygenBroadcastForRound2}
 */
proto.KeygenBroadcastForRound2.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setFrom(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setCommitmenthex(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.KeygenBroadcastForRound2.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.KeygenBroadcastForRound2.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.KeygenBroadcastForRound2} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.KeygenBroadcastForRound2.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFrom();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getCommitmenthex();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string from = 1;
 * @return {string}
 */
proto.KeygenBroadcastForRound2.prototype.getFrom = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.KeygenBroadcastForRound2} returns this
 */
proto.KeygenBroadcastForRound2.prototype.setFrom = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string commitmentHex = 2;
 * @return {string}
 */
proto.KeygenBroadcastForRound2.prototype.getCommitmenthex = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.KeygenBroadcastForRound2} returns this
 */
proto.KeygenBroadcastForRound2.prototype.setCommitmenthex = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.AnyType.oneofGroups_ = [[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17]];

/**
 * @enum {number}
 */
proto.AnyType.DataCase = {
  DATA_NOT_SET: 0,
  AFFINEPOINT: 1,
  EXPONENT: 2,
  PEDERSENPARAMETERS: 3,
  ZKSCHCOMMITMENT: 4,
  KEYGENBROADCASTFORROUND3: 5,
  ZKMODRESPONSE: 6,
  ZKMODPROOF: 7,
  KEYGENBROADCASTFORROUND4: 8,
  ZKPRMPRIVATE: 9,
  ZKPRMPROOF: 10,
  ZKSCHRESPONSE: 11,
  KEYGENBROADCASTFORROUND5: 12,
  ZKFACPUBLIC: 13,
  ZKFACPRIVATE: 14,
  ZKFACCOMMITMENT: 15,
  ZKFACPROOF: 16,
  KEYGENBROADCASTFORROUND2: 17
};

/**
 * @return {proto.AnyType.DataCase}
 */
proto.AnyType.prototype.getDataCase = function() {
  return /** @type {proto.AnyType.DataCase} */(jspb.Message.computeOneofCase(this, proto.AnyType.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.AnyType.prototype.toObject = function(opt_includeInstance) {
  return proto.AnyType.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.AnyType} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.AnyType.toObject = function(includeInstance, msg) {
  var f, obj = {
    affinepoint: (f = msg.getAffinepoint()) && proto.AffinePoint.toObject(includeInstance, f),
    exponent: (f = msg.getExponent()) && proto.Exponent.toObject(includeInstance, f),
    pedersenparameters: (f = msg.getPedersenparameters()) && proto.PedersenParameters.toObject(includeInstance, f),
    zkschcommitment: (f = msg.getZkschcommitment()) && proto.ZkSchCommitment.toObject(includeInstance, f),
    keygenbroadcastforround3: (f = msg.getKeygenbroadcastforround3()) && proto.KeygenBroadcastForRound3.toObject(includeInstance, f),
    zkmodresponse: (f = msg.getZkmodresponse()) && proto.ZkModResponse.toObject(includeInstance, f),
    zkmodproof: (f = msg.getZkmodproof()) && proto.ZkModProof.toObject(includeInstance, f),
    keygenbroadcastforround4: (f = msg.getKeygenbroadcastforround4()) && proto.KeygenBroadcastForRound4.toObject(includeInstance, f),
    zkprmprivate: (f = msg.getZkprmprivate()) && proto.ZkPrmPrivate.toObject(includeInstance, f),
    zkprmproof: (f = msg.getZkprmproof()) && proto.ZkPrmProof.toObject(includeInstance, f),
    zkschresponse: (f = msg.getZkschresponse()) && proto.ZkSchResponse.toObject(includeInstance, f),
    keygenbroadcastforround5: (f = msg.getKeygenbroadcastforround5()) && proto.KeygenBroadcastForRound5.toObject(includeInstance, f),
    zkfacpublic: (f = msg.getZkfacpublic()) && proto.ZkFacPublic.toObject(includeInstance, f),
    zkfacprivate: (f = msg.getZkfacprivate()) && proto.ZkFacPrivate.toObject(includeInstance, f),
    zkfaccommitment: (f = msg.getZkfaccommitment()) && proto.ZkFacCommitment.toObject(includeInstance, f),
    zkfacproof: (f = msg.getZkfacproof()) && proto.ZkFacProof.toObject(includeInstance, f),
    keygenbroadcastforround2: (f = msg.getKeygenbroadcastforround2()) && proto.KeygenBroadcastForRound2.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.AnyType}
 */
proto.AnyType.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.AnyType;
  return proto.AnyType.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.AnyType} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.AnyType}
 */
proto.AnyType.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.AffinePoint;
      reader.readMessage(value,proto.AffinePoint.deserializeBinaryFromReader);
      msg.setAffinepoint(value);
      break;
    case 2:
      var value = new proto.Exponent;
      reader.readMessage(value,proto.Exponent.deserializeBinaryFromReader);
      msg.setExponent(value);
      break;
    case 3:
      var value = new proto.PedersenParameters;
      reader.readMessage(value,proto.PedersenParameters.deserializeBinaryFromReader);
      msg.setPedersenparameters(value);
      break;
    case 4:
      var value = new proto.ZkSchCommitment;
      reader.readMessage(value,proto.ZkSchCommitment.deserializeBinaryFromReader);
      msg.setZkschcommitment(value);
      break;
    case 5:
      var value = new proto.KeygenBroadcastForRound3;
      reader.readMessage(value,proto.KeygenBroadcastForRound3.deserializeBinaryFromReader);
      msg.setKeygenbroadcastforround3(value);
      break;
    case 6:
      var value = new proto.ZkModResponse;
      reader.readMessage(value,proto.ZkModResponse.deserializeBinaryFromReader);
      msg.setZkmodresponse(value);
      break;
    case 7:
      var value = new proto.ZkModProof;
      reader.readMessage(value,proto.ZkModProof.deserializeBinaryFromReader);
      msg.setZkmodproof(value);
      break;
    case 8:
      var value = new proto.KeygenBroadcastForRound4;
      reader.readMessage(value,proto.KeygenBroadcastForRound4.deserializeBinaryFromReader);
      msg.setKeygenbroadcastforround4(value);
      break;
    case 9:
      var value = new proto.ZkPrmPrivate;
      reader.readMessage(value,proto.ZkPrmPrivate.deserializeBinaryFromReader);
      msg.setZkprmprivate(value);
      break;
    case 10:
      var value = new proto.ZkPrmProof;
      reader.readMessage(value,proto.ZkPrmProof.deserializeBinaryFromReader);
      msg.setZkprmproof(value);
      break;
    case 11:
      var value = new proto.ZkSchResponse;
      reader.readMessage(value,proto.ZkSchResponse.deserializeBinaryFromReader);
      msg.setZkschresponse(value);
      break;
    case 12:
      var value = new proto.KeygenBroadcastForRound5;
      reader.readMessage(value,proto.KeygenBroadcastForRound5.deserializeBinaryFromReader);
      msg.setKeygenbroadcastforround5(value);
      break;
    case 13:
      var value = new proto.ZkFacPublic;
      reader.readMessage(value,proto.ZkFacPublic.deserializeBinaryFromReader);
      msg.setZkfacpublic(value);
      break;
    case 14:
      var value = new proto.ZkFacPrivate;
      reader.readMessage(value,proto.ZkFacPrivate.deserializeBinaryFromReader);
      msg.setZkfacprivate(value);
      break;
    case 15:
      var value = new proto.ZkFacCommitment;
      reader.readMessage(value,proto.ZkFacCommitment.deserializeBinaryFromReader);
      msg.setZkfaccommitment(value);
      break;
    case 16:
      var value = new proto.ZkFacProof;
      reader.readMessage(value,proto.ZkFacProof.deserializeBinaryFromReader);
      msg.setZkfacproof(value);
      break;
    case 17:
      var value = new proto.KeygenBroadcastForRound2;
      reader.readMessage(value,proto.KeygenBroadcastForRound2.deserializeBinaryFromReader);
      msg.setKeygenbroadcastforround2(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.AnyType.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.AnyType.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.AnyType} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.AnyType.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAffinepoint();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.AffinePoint.serializeBinaryToWriter
    );
  }
  f = message.getExponent();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.Exponent.serializeBinaryToWriter
    );
  }
  f = message.getPedersenparameters();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.PedersenParameters.serializeBinaryToWriter
    );
  }
  f = message.getZkschcommitment();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.ZkSchCommitment.serializeBinaryToWriter
    );
  }
  f = message.getKeygenbroadcastforround3();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.KeygenBroadcastForRound3.serializeBinaryToWriter
    );
  }
  f = message.getZkmodresponse();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.ZkModResponse.serializeBinaryToWriter
    );
  }
  f = message.getZkmodproof();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      proto.ZkModProof.serializeBinaryToWriter
    );
  }
  f = message.getKeygenbroadcastforround4();
  if (f != null) {
    writer.writeMessage(
      8,
      f,
      proto.KeygenBroadcastForRound4.serializeBinaryToWriter
    );
  }
  f = message.getZkprmprivate();
  if (f != null) {
    writer.writeMessage(
      9,
      f,
      proto.ZkPrmPrivate.serializeBinaryToWriter
    );
  }
  f = message.getZkprmproof();
  if (f != null) {
    writer.writeMessage(
      10,
      f,
      proto.ZkPrmProof.serializeBinaryToWriter
    );
  }
  f = message.getZkschresponse();
  if (f != null) {
    writer.writeMessage(
      11,
      f,
      proto.ZkSchResponse.serializeBinaryToWriter
    );
  }
  f = message.getKeygenbroadcastforround5();
  if (f != null) {
    writer.writeMessage(
      12,
      f,
      proto.KeygenBroadcastForRound5.serializeBinaryToWriter
    );
  }
  f = message.getZkfacpublic();
  if (f != null) {
    writer.writeMessage(
      13,
      f,
      proto.ZkFacPublic.serializeBinaryToWriter
    );
  }
  f = message.getZkfacprivate();
  if (f != null) {
    writer.writeMessage(
      14,
      f,
      proto.ZkFacPrivate.serializeBinaryToWriter
    );
  }
  f = message.getZkfaccommitment();
  if (f != null) {
    writer.writeMessage(
      15,
      f,
      proto.ZkFacCommitment.serializeBinaryToWriter
    );
  }
  f = message.getZkfacproof();
  if (f != null) {
    writer.writeMessage(
      16,
      f,
      proto.ZkFacProof.serializeBinaryToWriter
    );
  }
  f = message.getKeygenbroadcastforround2();
  if (f != null) {
    writer.writeMessage(
      17,
      f,
      proto.KeygenBroadcastForRound2.serializeBinaryToWriter
    );
  }
};


/**
 * optional AffinePoint affinePoint = 1;
 * @return {?proto.AffinePoint}
 */
proto.AnyType.prototype.getAffinepoint = function() {
  return /** @type{?proto.AffinePoint} */ (
    jspb.Message.getWrapperField(this, proto.AffinePoint, 1));
};


/**
 * @param {?proto.AffinePoint|undefined} value
 * @return {!proto.AnyType} returns this
*/
proto.AnyType.prototype.setAffinepoint = function(value) {
  return jspb.Message.setOneofWrapperField(this, 1, proto.AnyType.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.AnyType} returns this
 */
proto.AnyType.prototype.clearAffinepoint = function() {
  return this.setAffinepoint(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.AnyType.prototype.hasAffinepoint = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Exponent exponent = 2;
 * @return {?proto.Exponent}
 */
proto.AnyType.prototype.getExponent = function() {
  return /** @type{?proto.Exponent} */ (
    jspb.Message.getWrapperField(this, proto.Exponent, 2));
};


/**
 * @param {?proto.Exponent|undefined} value
 * @return {!proto.AnyType} returns this
*/
proto.AnyType.prototype.setExponent = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.AnyType.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.AnyType} returns this
 */
proto.AnyType.prototype.clearExponent = function() {
  return this.setExponent(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.AnyType.prototype.hasExponent = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional PedersenParameters pedersenParameters = 3;
 * @return {?proto.PedersenParameters}
 */
proto.AnyType.prototype.getPedersenparameters = function() {
  return /** @type{?proto.PedersenParameters} */ (
    jspb.Message.getWrapperField(this, proto.PedersenParameters, 3));
};


/**
 * @param {?proto.PedersenParameters|undefined} value
 * @return {!proto.AnyType} returns this
*/
proto.AnyType.prototype.setPedersenparameters = function(value) {
  return jspb.Message.setOneofWrapperField(this, 3, proto.AnyType.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.AnyType} returns this
 */
proto.AnyType.prototype.clearPedersenparameters = function() {
  return this.setPedersenparameters(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.AnyType.prototype.hasPedersenparameters = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional ZkSchCommitment zkSchCommitment = 4;
 * @return {?proto.ZkSchCommitment}
 */
proto.AnyType.prototype.getZkschcommitment = function() {
  return /** @type{?proto.ZkSchCommitment} */ (
    jspb.Message.getWrapperField(this, proto.ZkSchCommitment, 4));
};


/**
 * @param {?proto.ZkSchCommitment|undefined} value
 * @return {!proto.AnyType} returns this
*/
proto.AnyType.prototype.setZkschcommitment = function(value) {
  return jspb.Message.setOneofWrapperField(this, 4, proto.AnyType.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.AnyType} returns this
 */
proto.AnyType.prototype.clearZkschcommitment = function() {
  return this.setZkschcommitment(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.AnyType.prototype.hasZkschcommitment = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional KeygenBroadcastForRound3 keygenBroadcastForRound3 = 5;
 * @return {?proto.KeygenBroadcastForRound3}
 */
proto.AnyType.prototype.getKeygenbroadcastforround3 = function() {
  return /** @type{?proto.KeygenBroadcastForRound3} */ (
    jspb.Message.getWrapperField(this, proto.KeygenBroadcastForRound3, 5));
};


/**
 * @param {?proto.KeygenBroadcastForRound3|undefined} value
 * @return {!proto.AnyType} returns this
*/
proto.AnyType.prototype.setKeygenbroadcastforround3 = function(value) {
  return jspb.Message.setOneofWrapperField(this, 5, proto.AnyType.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.AnyType} returns this
 */
proto.AnyType.prototype.clearKeygenbroadcastforround3 = function() {
  return this.setKeygenbroadcastforround3(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.AnyType.prototype.hasKeygenbroadcastforround3 = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional ZkModResponse zkModResponse = 6;
 * @return {?proto.ZkModResponse}
 */
proto.AnyType.prototype.getZkmodresponse = function() {
  return /** @type{?proto.ZkModResponse} */ (
    jspb.Message.getWrapperField(this, proto.ZkModResponse, 6));
};


/**
 * @param {?proto.ZkModResponse|undefined} value
 * @return {!proto.AnyType} returns this
*/
proto.AnyType.prototype.setZkmodresponse = function(value) {
  return jspb.Message.setOneofWrapperField(this, 6, proto.AnyType.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.AnyType} returns this
 */
proto.AnyType.prototype.clearZkmodresponse = function() {
  return this.setZkmodresponse(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.AnyType.prototype.hasZkmodresponse = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional ZkModProof zkModProof = 7;
 * @return {?proto.ZkModProof}
 */
proto.AnyType.prototype.getZkmodproof = function() {
  return /** @type{?proto.ZkModProof} */ (
    jspb.Message.getWrapperField(this, proto.ZkModProof, 7));
};


/**
 * @param {?proto.ZkModProof|undefined} value
 * @return {!proto.AnyType} returns this
*/
proto.AnyType.prototype.setZkmodproof = function(value) {
  return jspb.Message.setOneofWrapperField(this, 7, proto.AnyType.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.AnyType} returns this
 */
proto.AnyType.prototype.clearZkmodproof = function() {
  return this.setZkmodproof(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.AnyType.prototype.hasZkmodproof = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional KeygenBroadcastForRound4 keygenBroadcastForRound4 = 8;
 * @return {?proto.KeygenBroadcastForRound4}
 */
proto.AnyType.prototype.getKeygenbroadcastforround4 = function() {
  return /** @type{?proto.KeygenBroadcastForRound4} */ (
    jspb.Message.getWrapperField(this, proto.KeygenBroadcastForRound4, 8));
};


/**
 * @param {?proto.KeygenBroadcastForRound4|undefined} value
 * @return {!proto.AnyType} returns this
*/
proto.AnyType.prototype.setKeygenbroadcastforround4 = function(value) {
  return jspb.Message.setOneofWrapperField(this, 8, proto.AnyType.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.AnyType} returns this
 */
proto.AnyType.prototype.clearKeygenbroadcastforround4 = function() {
  return this.setKeygenbroadcastforround4(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.AnyType.prototype.hasKeygenbroadcastforround4 = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional ZkPrmPrivate zkPrmPrivate = 9;
 * @return {?proto.ZkPrmPrivate}
 */
proto.AnyType.prototype.getZkprmprivate = function() {
  return /** @type{?proto.ZkPrmPrivate} */ (
    jspb.Message.getWrapperField(this, proto.ZkPrmPrivate, 9));
};


/**
 * @param {?proto.ZkPrmPrivate|undefined} value
 * @return {!proto.AnyType} returns this
*/
proto.AnyType.prototype.setZkprmprivate = function(value) {
  return jspb.Message.setOneofWrapperField(this, 9, proto.AnyType.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.AnyType} returns this
 */
proto.AnyType.prototype.clearZkprmprivate = function() {
  return this.setZkprmprivate(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.AnyType.prototype.hasZkprmprivate = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * optional ZkPrmProof zkPrmProof = 10;
 * @return {?proto.ZkPrmProof}
 */
proto.AnyType.prototype.getZkprmproof = function() {
  return /** @type{?proto.ZkPrmProof} */ (
    jspb.Message.getWrapperField(this, proto.ZkPrmProof, 10));
};


/**
 * @param {?proto.ZkPrmProof|undefined} value
 * @return {!proto.AnyType} returns this
*/
proto.AnyType.prototype.setZkprmproof = function(value) {
  return jspb.Message.setOneofWrapperField(this, 10, proto.AnyType.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.AnyType} returns this
 */
proto.AnyType.prototype.clearZkprmproof = function() {
  return this.setZkprmproof(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.AnyType.prototype.hasZkprmproof = function() {
  return jspb.Message.getField(this, 10) != null;
};


/**
 * optional ZkSchResponse zkSchResponse = 11;
 * @return {?proto.ZkSchResponse}
 */
proto.AnyType.prototype.getZkschresponse = function() {
  return /** @type{?proto.ZkSchResponse} */ (
    jspb.Message.getWrapperField(this, proto.ZkSchResponse, 11));
};


/**
 * @param {?proto.ZkSchResponse|undefined} value
 * @return {!proto.AnyType} returns this
*/
proto.AnyType.prototype.setZkschresponse = function(value) {
  return jspb.Message.setOneofWrapperField(this, 11, proto.AnyType.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.AnyType} returns this
 */
proto.AnyType.prototype.clearZkschresponse = function() {
  return this.setZkschresponse(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.AnyType.prototype.hasZkschresponse = function() {
  return jspb.Message.getField(this, 11) != null;
};


/**
 * optional KeygenBroadcastForRound5 keygenBroadcastForRound5 = 12;
 * @return {?proto.KeygenBroadcastForRound5}
 */
proto.AnyType.prototype.getKeygenbroadcastforround5 = function() {
  return /** @type{?proto.KeygenBroadcastForRound5} */ (
    jspb.Message.getWrapperField(this, proto.KeygenBroadcastForRound5, 12));
};


/**
 * @param {?proto.KeygenBroadcastForRound5|undefined} value
 * @return {!proto.AnyType} returns this
*/
proto.AnyType.prototype.setKeygenbroadcastforround5 = function(value) {
  return jspb.Message.setOneofWrapperField(this, 12, proto.AnyType.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.AnyType} returns this
 */
proto.AnyType.prototype.clearKeygenbroadcastforround5 = function() {
  return this.setKeygenbroadcastforround5(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.AnyType.prototype.hasKeygenbroadcastforround5 = function() {
  return jspb.Message.getField(this, 12) != null;
};


/**
 * optional ZkFacPublic zkFacPublic = 13;
 * @return {?proto.ZkFacPublic}
 */
proto.AnyType.prototype.getZkfacpublic = function() {
  return /** @type{?proto.ZkFacPublic} */ (
    jspb.Message.getWrapperField(this, proto.ZkFacPublic, 13));
};


/**
 * @param {?proto.ZkFacPublic|undefined} value
 * @return {!proto.AnyType} returns this
*/
proto.AnyType.prototype.setZkfacpublic = function(value) {
  return jspb.Message.setOneofWrapperField(this, 13, proto.AnyType.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.AnyType} returns this
 */
proto.AnyType.prototype.clearZkfacpublic = function() {
  return this.setZkfacpublic(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.AnyType.prototype.hasZkfacpublic = function() {
  return jspb.Message.getField(this, 13) != null;
};


/**
 * optional ZkFacPrivate zkFacPrivate = 14;
 * @return {?proto.ZkFacPrivate}
 */
proto.AnyType.prototype.getZkfacprivate = function() {
  return /** @type{?proto.ZkFacPrivate} */ (
    jspb.Message.getWrapperField(this, proto.ZkFacPrivate, 14));
};


/**
 * @param {?proto.ZkFacPrivate|undefined} value
 * @return {!proto.AnyType} returns this
*/
proto.AnyType.prototype.setZkfacprivate = function(value) {
  return jspb.Message.setOneofWrapperField(this, 14, proto.AnyType.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.AnyType} returns this
 */
proto.AnyType.prototype.clearZkfacprivate = function() {
  return this.setZkfacprivate(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.AnyType.prototype.hasZkfacprivate = function() {
  return jspb.Message.getField(this, 14) != null;
};


/**
 * optional ZkFacCommitment zkFacCommitment = 15;
 * @return {?proto.ZkFacCommitment}
 */
proto.AnyType.prototype.getZkfaccommitment = function() {
  return /** @type{?proto.ZkFacCommitment} */ (
    jspb.Message.getWrapperField(this, proto.ZkFacCommitment, 15));
};


/**
 * @param {?proto.ZkFacCommitment|undefined} value
 * @return {!proto.AnyType} returns this
*/
proto.AnyType.prototype.setZkfaccommitment = function(value) {
  return jspb.Message.setOneofWrapperField(this, 15, proto.AnyType.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.AnyType} returns this
 */
proto.AnyType.prototype.clearZkfaccommitment = function() {
  return this.setZkfaccommitment(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.AnyType.prototype.hasZkfaccommitment = function() {
  return jspb.Message.getField(this, 15) != null;
};


/**
 * optional ZkFacProof zkFacProof = 16;
 * @return {?proto.ZkFacProof}
 */
proto.AnyType.prototype.getZkfacproof = function() {
  return /** @type{?proto.ZkFacProof} */ (
    jspb.Message.getWrapperField(this, proto.ZkFacProof, 16));
};


/**
 * @param {?proto.ZkFacProof|undefined} value
 * @return {!proto.AnyType} returns this
*/
proto.AnyType.prototype.setZkfacproof = function(value) {
  return jspb.Message.setOneofWrapperField(this, 16, proto.AnyType.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.AnyType} returns this
 */
proto.AnyType.prototype.clearZkfacproof = function() {
  return this.setZkfacproof(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.AnyType.prototype.hasZkfacproof = function() {
  return jspb.Message.getField(this, 16) != null;
};


/**
 * optional KeygenBroadcastForRound2 keygenBroadcastForRound2 = 17;
 * @return {?proto.KeygenBroadcastForRound2}
 */
proto.AnyType.prototype.getKeygenbroadcastforround2 = function() {
  return /** @type{?proto.KeygenBroadcastForRound2} */ (
    jspb.Message.getWrapperField(this, proto.KeygenBroadcastForRound2, 17));
};


/**
 * @param {?proto.KeygenBroadcastForRound2|undefined} value
 * @return {!proto.AnyType} returns this
*/
proto.AnyType.prototype.setKeygenbroadcastforround2 = function(value) {
  return jspb.Message.setOneofWrapperField(this, 17, proto.AnyType.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.AnyType} returns this
 */
proto.AnyType.prototype.clearKeygenbroadcastforround2 = function() {
  return this.setKeygenbroadcastforround2(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.AnyType.prototype.hasKeygenbroadcastforround2 = function() {
  return jspb.Message.getField(this, 17) != null;
};


goog.object.extend(exports, proto);
